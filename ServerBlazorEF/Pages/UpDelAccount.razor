@page "/updelaccount/{id}/{mode}"
@inject AuthService AuthService
@inject AccountService accountService
@inject NavigationManager NavManager

<style>
    fieldset {
        border: 2px solid #000;
        padding-left: 20px;
        margin-bottom: 20px;
    }
</style>

<PageTitle>Update/Delete Account</PageTitle>
@if (isAdmin) {
    <div class="top-row-admin">
    <p style="font-weight: bold; text-align: left;">Admin:</p>
    <p><a href="/contacts">Contacts</a></p>
    <p><a href="/paymentmethods">Payment Methods</a></p>
    <p><a href="/transtypes">Transaction Types</a></p>
    <p><a href="/taxreceipt">Tax Receipts</a></p>
    </div>
}

@if (account != null && Mode == "edit") // Update
{
    <EditForm Model="@account" OnValidSubmit="HandleValidSubmit">

        <ValidationSummary />

        <div class="form-group">
            <label for="FirstName">First Name:</label>
            <InputText id="FirstName" class="form-control" @bind-Value="account.FirstName" />
        </div>

        <div class="form-group">
            <label for="LastName">Last Name:</label>
            <InputText id="LastName" class="form-control" @bind-Value="account.LastName" />
        </div>

        <div class="form-group">
            <label for="Email">Email:</label>
            <InputText id="Email" class="form-control" @bind-Value="account.Email" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>

    @code {
        private async Task HandleValidSubmit()
        {
            if (account != null)
            {
                account.Modified = DateTime.Now;
                account.ModifiedBy = debug;

                await accountService.UpdateAccountAsync(account.AccountNo, account);
            }
            NavManager.NavigateTo("/contacts");
        }
    }
}
else if (account != null && Mode == "del")
{ // Delete
    // display account details
    <fieldset>
        <legend>Account Information</legend>
        <p>Deleting the following account:</p>
        <p>First Name: @account.FirstName</p>
        <p>Last Name: @account.LastName</p>
        <p>Email: @account.Email</p>
    </fieldset>
    <p>Are you sure?</p>
    <button type="button" class="btn btn-danger" @onclick="HandleDeleteAccount">Delete</button>
    @code {
        private async Task HandleDeleteAccount()
        {
            await accountService.DeleteAccountAsync(account!.AccountNo);
            NavManager.NavigateTo("/contacts");
        }
    }
}
else
{
    <p>Account with ID == @Id not found</p>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Mode { get; set; }
    private Account? account = new Account();
    private string debug = "";
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthService.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false) {
            // User is authenticated
            // Should check if the user has the 'Admin' role
            var username = authState.User.Identity?.Name;
            debug = username ?? "no username";
                        isAdmin = authState.User.IsInRole("Admin");
            if(!isAdmin) {
                NavManager.NavigateTo("/login");
            }

        } else {
            // User is not authenticated
            NavManager.NavigateTo("/login");
            debug = "not authenticated";

        }
        int intId = Convert.ToInt32(Id);
        account = await accountService.GetAccountByIdAsync(intId);
    }
}
